1. 做项目时总是没有先规划，造成的结果是：
    1.巨大的时间浪费，过程中更加卡顿，bug很多
    2.可读性差，下一步操作越来越艰难。
    3.遇到问题不容易检查出来
    4.最终要的是不容易更新维护，让自己都想放弃！！！
    如何决解：
        1.首先基本规划记录于文件中，重点在于后续的不断完善和修改都要及时记录，包括如下
        2.分析大致业务需求，需要实现的大的方面的功能。
        3.每次添加一个类时，要考虑继承机制，即要不要为其设计接口或者超类。还要一个类应该
        让其实现的功能单一明确或者具有针对性，能有一定的功能逻辑。
        4.要处理好不同的模块：多线线程设计模块，日志系统和异常文档，资源处理模块。

2. 没有利用好面向对象的核心思想：重点是继承，基本的正确封装
    1.所有在类之外会使用的数据域，应该想办法放在超类或接口中，让超类提供方法，而此时需要超类或接口的原因是：这个类
    有一定的业务能力，为了避免与业务无关的代码造成类臃肿，不利于扩展和阅读。
    2.

3. 学过的知识没有实践总结到位包括：
    1.没有利用好异常机制，和日志机制：比如日志文件，异常该如何处理？捕获还是抛出，即没有设计异常框架
    2.没好好利用集合框架，同步集合框架
    3.没有把握好线程的的时机
    4.没有使用属性文件和首选API

4. 没有养成正确简洁注释的习惯，以及没有统一注释的风格
    1.所有类和方法的注释使用文档注释方式, 且上下文隔两行
    2.对语句块的注释用文本注释方式，且语句块上下文之间隔一行，表明整个语句块的功能，对简短的if语句的注释可以
    不用上下文之间换行，语句块的最尾处加行注释：//end
    3.所有局部变量和引用变量的什么和定义都用行注释，且在行末，如果行太长，可用文本注释方式在上的上面一行注释，
    且之间不换行；方法调必须要使用行注释，表明功能，
    4.没有认真对待命名，特别是类的成员的命名，类的命名

5. 你应该更加注重线程知识，比如线程池，原子操作，多使用并发集合框架。

6. 对常用的API运用不是特别熟练。也许你需要考虑最新API.

7. 在更改或处理bug是你可以做一个文件记录，把要处理的先记录下来。例如你可以自己设计一个小程序，用于处理或以后查看。