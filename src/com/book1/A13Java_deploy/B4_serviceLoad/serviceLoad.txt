public final class ServiceLoader<S>
extends Object
implements Iterable<S>
一个简单的【服务提供商】【加载工具】。
【服务类型】：服务加载器加载的接口类型，这个接口定义了能够提供的服务，其实际服务由服务提供商实现。即服务类型一般是接口或者抽象
类的数据类型。
【服务提供商】: 服务提供商是服务的具体实现,即能够实现完整功能的类，实现接口或抽象类所需的服务。如果服务不是接口或者不是抽象类，
则，服务提供商对服务本身定义的类进行子类化。服务提供商可以以Java扩展的形式安装在Java平台的实现中，也就是将jar文件放置到任何
通常的扩展目录中，也可以通过将它们添加到应用程序的类路径或某些其他平台特定的方式来提供。
为了扩展服务，同一服务可以有不同的服务提供商，即服务的不同实现方式，但服务必须自己提供适当的区别标志。
此外，每个服务提供商必须有一个默认的构造器，以便再加载服务时创建这种服务。
【加载工具】：表示ServiceLoader类是加载服务的一种工具，利用他，我们可以提供所有服务请求的加载。

用法：ServiceLoader<YourService> services = ServiceLoader.load(YourService.class);
其中：
YourService: 服务类型。
services: 加载工具

1. 定位服务提供商的地址：
在工程的默认src包下面创建 META-INF.services 子包。
然后在这个子包下建立以服务类型（YourService）的完全限定名命名的文本文件（注意不要额外加后缀名）.
最后在这个文本文件中编辑所有的服务提供商的完全限定名，即所有实现服务类型接口的完全限定类名。不同服务
提供商写在不同的行。不能只是用空格隔开不同的类。

2.通多对加载工具的迭代就是遍历所有的服务提供商。且服务提供商被迭代的顺序与在上面文本文件中被编辑
的顺序相同。也可以使用增强的for循环来遍历。