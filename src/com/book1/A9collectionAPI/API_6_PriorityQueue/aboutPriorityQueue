某一次运行结果：
97 -> [97]
88 -> [88, 97]
59 -> [59, 97, 88]
50 -> [50, 59, 88, 97]
49 -> [49, 50, 88, 97, 59]
96 -> [49, 50, 88, 97, 59, 96]
71 -> [49, 50, 71, 97, 59, 96, 88]
38 -> [38, 49, 71, 50, 59, 96, 88, 97]
83 -> [38, 49, 71, 50, 59, 96, 88, 97, 83]
26 -> [26, 38, 71, 50, 49, 96, 88, 97, 83, 59]
86 -> [26, 38, 71, 50, 49, 96, 88, 97, 83, 59, 86]
37 -> [26, 38, 37, 50, 49, 71, 88, 97, 83, 59, 86, 96]
93 -> [26, 38, 37, 50, 49, 71, 88, 97, 83, 59, 86, 96, 93]
80 -> [26, 38, 37, 50, 49, 71, 80, 97, 83, 59, 86, 96, 93, 88]
72 -> [26, 38, 37, 50, 49, 71, 72, 97, 83, 59, 86, 96, 93, 88, 80]
26 -> [37, 38, 71, 50, 49, 80, 72, 97, 83, 59, 86, 96, 93, 88]
37 -> [38, 49, 71, 50, 59, 80, 72, 97, 83, 88, 86, 96, 93]
38 -> [49, 50, 71, 83, 59, 80, 72, 97, 93, 88, 86, 96]
49 -> [50, 59, 71, 83, 86, 80, 72, 97, 93, 88, 96]
50 -> [59, 83, 71, 93, 86, 80, 72, 97, 96, 88]
59 -> [71, 83, 72, 93, 86, 80, 88, 97, 96]
71 -> [72, 83, 80, 93, 86, 96, 88, 97]
72 -> [80, 83, 88, 93, 86, 96, 97]
80 -> [83, 86, 88, 93, 97, 96]
83 -> [86, 93, 88, 96, 97]
86 -> [88, 93, 97, 96]
88 -> [93, 96, 97]
93 -> [96, 97]
96 -> [97]
97 -> []
*********************************************************************
解析：PriorityQueue类：实现原理 堆，自我调整的二叉树
注意：此数据结构没有同步包装器
1. 优先级队列存放的所有元素之间必须两两可比较大小。
2. 优先级队列只保证优先级最高的元素放置在第一位，即使增删操作之后，而其他元素的位置不保证,即会由于树结构被随机打乱
3.基本操作：
    增：
        boolean add(E e) //将指定的元素插入到此优先级队列中。
        boolean offer(E e)  //将指定的元素插入到此优先级队列中。
        public boolean addAll(Collection<? extends E> c) //将指定集合中的所有元素添加到此队列中。
    取：
        E peek()    //检索但不删除此队列的头，如果此队列为空，则返回 null 。
        public E element()  //检索，但不删除，这个队列的头。
    删：
        E poll()    //检索并删除此队列的头，如果此队列为空，则返回 null 。
        public E remove()   //检索并删除此队列的头。 此方法与poll不同之处在于，如果此队列为空，它将抛出异常。
        boolean remove(Object o)    //从该队列中删除指定元素的单个实例（如果存在）。
        public boolean removeAll(Collection<?> c)   //删除指定集合中包含的所有此集合的元素（可选操作）。
        void clear() //从此优先级队列中删除所有元素。
    改：由于元素与次序无关，所有没有改操作
    查：
        boolean contains(Object o)  //如果此队列包含指定的元素，则返回 true 。
        public boolean containsAll(Collection<?> c) //如果此集合包含指定集合中的所有元素，则返回true。


*********************************************************************
*********************************************************************
Comparator<? super E> comparator()  //返回用于为了在这个队列中的元素，或比较null如果此队列根据所述排序natural ordering的元素。
Iterator<E> iterator()  //返回此队列中的元素的迭代器。
int size()  //返回此集合中的元素数。
Object[] toArray()  //返回一个包含此队列中所有元素的数组。
<T> T[] toArray(T[] a)

继承方法：
*********************************************************************
Methods inherited from class java.util.AbstractQueue
    addAll, element, remove
*********************************************************************
Methods inherited from class java.util.AbstractCollection
    containsAll, isEmpty, removeAll, retainAll, toString
*********************************************************************
Methods inherited from class java.lang.Object
    clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
*********************************************************************
Methods inherited from interface java.util.Collection
    containsAll, equals, hashCode, isEmpty, parallelStream, removeAll, removeIf, retainAll, stream
*********************************************************************
Methods inherited from interface java.lang.Iterable
    forEach

