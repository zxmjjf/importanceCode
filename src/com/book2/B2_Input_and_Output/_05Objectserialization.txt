70  --->结束标志
71   4字节长序列号   --->表示引用该序列号已存在的数据，可以是 类型 和 对象！
72  --->存对象类型的开始，数据类型，不是数据。
73  --->存对象的开始，不是类型，是类的实例，即对象
74  --->存字符串的开始
75  --->存数组对象
77  --->表示外部存储
78  --->无超类

1. 基本类型的值将其转化为相应的二进制数据。
2. 存对象时【数组，字符串，自定义的对象】，先存其类型，再类型结束标志或所有超类的结束标志之后再存数据。
在存一个对象的类型的数据域条目时：
如果是基本类型： 1字节类型标志    2字节数据域名称的长度    数据域名称
如果是对象： L    2字节数据域名称的长度    数据域名称   74   2字节数据域类型名称的长度   数据域类型名
由此可知此时将数据域类型名当作字符串存储！
************************************************************
1. AC  ED  xx  xx  【4字节，后面2字节是对象的版本号】

2. 存字符串：74  xx  xx 字符序列（n字节）  【第2，3字节表示字符串长度，字符序列使用 修订版UTF-8 编码保存，即特殊的字符串】

3. 存储对象时，先存其类型（类型描述）。

4. 存对象：73    类型描述     对象数据
类型描述 的存储格式如下：

    72（开头）  2字节类名的长度  类名（n字节）  8字节类的指纹     1字节类标志    2字节数据域描述符的数量
    罗列数据域类型和名字：1字节数据类型标志  2字节名字长度  n字节数据域名称
    78（结束） 超类类型（没有超类就70）

如果有超类类型，则上述 78 字节之后是该超类的完整 类型描述
【注：当 数据域类型标志 为 L 时， 下面紧跟着一个字符串：74 xx xx L对象名】

5. 存数组：75   类描述符    4字节数组长度     数组项（数组元素对象）
基本上就是下面框架：
如果数组类已存在： 75    71     4字节长的序列号     n字节的数组项
如果数组类不存在：
75  72  xx  xx  [L类型名;  8字节指纹+1字节标志    00   00  78  70    4字节数组长度   n字节数组项

6. 空引用被存储为：（换行）70




