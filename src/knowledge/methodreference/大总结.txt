1. 方法引用，lambda表达式，（局部）匿名内部类 这三者之间本质上是一样的，即最终Java编译器都会将其加工为局部匿名内部类

2. 使用上面这三种逻辑的地方一定是为了替代函数式接口：
    一般有两种情况（语法上这两种情况都是一样）
        a）当函数式接口作为某个类中的方法形参的声明类型时：调用此方法时，完全可以通过这三种逻辑代替这个实现了这个函数
            式接口的类的对象。需要注意的是：其一：这个接口必须保证是函数式接口，其二：这个类的方法要让函数式接口作为
            形参只是为了使用这个函数式接口的有且仅有一个抽象的方法，让其实现某种功能；
            因此，这里用接口作为函数的形参，并不是为了更好的实现多态，虽然在最终转化为匿名局部内部类是的方法调用会
            多态处理。
        b）当函数式接口作为某个变量的声明语句时，此时等号右边的表达式也可以使用这三种逻辑实参传值给形参也是赋值语句的
            一种，因此在原理上和 a 点一样，只不过，显示赋值表达式相当于可以捕获到匿名局部内部类。

3. 方法引用的形式主要有以下三种：
    1）object::method  ==>>  对象的方法引用
    2）Class::method   ==>>  类的静态方法引用
    3）Class::method   ==>>  method不是静态方法，但又必须使用静态方法的形式去引用
  注：前面两种情况完全只是将method作为函数式接口的唯一抽象方法的的方法体来是使用。第三种情况比较特殊，它会把
     函数式接口 中 唯一抽象方法 的 第一个形参 作为method的隐式参数，也就是说，第一个形参的类型就是method方法
     所属的类，而如果该抽象方法还有其他类型，就会全部匹配到method方法的显示参数之中，也必须保持匹配。
     一定要注意，这种情况下，method不是静态方法！！！


4. 当使用三种逻辑式，首先把注意力集中在使用这个函数式接口的定义上，这里需要依此注意下面几个细节个细节：
    a）保证该接口抽象方法唯一。
    b）记住这个函数式接口唯一的抽象方法的返回类型和参数类型：特别是如果此接口的返回类型为void，则lambda表达式箭头
    右边的代码块就不能有返回值。代码块中每一条完整表达式的计算结果没有用相应变量来保存（即表达式没有作为右值），则该
    表示式相当于在前面省略了 return ，所以此时会将其作为返回值，而出现错误。
    c）如果如果函数式接口作为方法的形参，即实参为这三种逻辑，则此时还需要了解此函数的代码实现，找到这个需要用到函数式
        接口中唯一抽象方法的地方，看齐作为何种用途。（这关系到lambda表达式的主体代码块的实现）
    d）虽然方法引用是lambda表达式的简洁形式，但是其更加受限制，如参数要求对应，且代码逻辑只用完全使用所引用的代码体
        不能再增加多余语句。但同时也要注意，如果有方法引用可以调用，优先使用方法引用。

5. 方法这三种逻辑都不能独立存在，即，必须直接或间接（作为方法的实参，函数的返回值）的作为赋值表达式的右值。

6. 构造器引用：
   格式：Class::new  ==>>  x -> new Class(x)  |->其中x表示函数式接口中唯一抽象方法的形参列表，即通过形参列表匹配合适的构造器
        如果参数不能对应，则报错
   数组的构造器引用：T[]::new  ==>  x -> new T[x]  |->所以此时x所对应的参数列表应该是只有一个int类型变量。

7. 方法引用的分析思路和设计结构：
 1. 设计思路：这三种逻辑语句存在的根源：需要使用到实现某个 函数式接口 的 匿名类 的地方！！！
 而三种逻辑中，简介，意味着功能的限制！所以，匿名类的功能是最为强大的！如果不是为获得匿名类，往往，会将这种表达式作为某个方法的实参，
 而必然的，这个方法必然有使用到某个函数式接口中抽象方法的语句。如果式方法引用，则注意参数匹配，特别是一般方法引用的第三种情况和构造器
 引用！

 2. 由方法引用语句或lambda表达式语句分析代码的思路：
    a）如果可以，牢记方法引用的参数由函数式接口中的抽象方法提供。
    b）分析方法引用中方法体的代码，方法的返回值，实参是否会改变。
    c）如果方法引用的处于一种比较简单的结构中，根据 a）和 b），尝试将其理解为匿名内部类。
    d）如果方法引用作为someMethod方法调用的实际参数，找到someMethod方法的定义，再直接找到someMethod方法中使用
    函数式接口中抽象方法的语句，即确认其调用此抽象方法的目的。
    e）通过 d）找到的抽象方法的语句，一定要理解，当someMethod执行此语句是会转到执行lambda表达式或者方法引用的代码块
