1. 做项目时总是没有先规划，造成的结果是：
    1.巨大的时间浪费，过程中更加卡顿，bug很多
    2.可读性差，下一步操作越来越艰难。
    3.遇到问题不容易检查出来
    4.最终要的是不容易更新维护，让自己都想放弃！！！
    如何决解：
        1.首先基本规划记录于文件中，重点在于后续的不断完善和修改都要及时记录，包括如下
        2.分析大致业务需求，需要实现的大的方面的功能。
        3.每次添加一个类时，要考虑继承机制，即要不要为其设计接口或者超类。还要一个类应该
        让其实现的功能单一明确或者具有针对性，能有一定的功能逻辑。
        4.要处理好不同的模块：多线线程设计模块，日志系统和异常文档，资源处理模块。

2. 没有利用好面向对象的核心思想：重点是继承，基本的正确封装
    1.所有在类之外会使用的数据域，应该想办法放在超类或接口中，让超类提供方法，而此时需要超类或接口的原因是：这个类
    有一定的业务能力，为了避免与业务无关的代码造成类臃肿，不利于扩展和阅读。
    2.

3. 学过的知识没有实践总结到位包括：
    1.没有利用好异常机制，和日志机制：比如日志文件，异常该如何处理？捕获还是抛出，即没有设计异常框架
    2.没好好利用集合框架，同步集合框架
    3.没有把握好线程的的时机
    4.没有使用属性文件和首选API

4. 没有养成正确简洁注释的习惯，以及没有统一注释的风格
    1.所有类和方法的注释使用文档注释方式, 且上下文隔两行
    2.对语句块的注释用文本注释方式，且语句块上下文之间隔一行，表明整个语句块的功能，对简短的if语句的注释可以
    不用上下文之间换行，语句块的最尾处加行注释：//end
    3.所有局部变量和引用变量的什么和定义都用行注释，且在行末，如果行太长，可用文本注释方式在上的上面一行注释，
    且之间不换行；方法调必须要使用行注释，表明功能，
    4.没有认真对待命名，特别是类的成员的命名，类的命名

5. 你应该更加注重线程知识，比如线程池，原子操作，多使用并发集合框架。

6. 对常用的API运用不是特别熟练。也许你需要考虑最新API.

7. 在更改或处理bug是你可以做一个文件记录，把要处理的先记录下来。例如你可以自己设计一个小程序，用于处理或以后查看。

8. 不管任何时候，都要尽可能的对项目分模块，每个模块的业务逻辑应该清晰，分模块真正收益来自于对文件的合理命名，以及
在同一模块之间的不同类文件中正确命名。合理命名，类应该简单，但类也应该功能完整！

*************************************************************************************************
在做项目的时候，你应该：
1.准备工作：建一个特别的包，用于放置下面文档（各种类型的文件）
    1【项目文档】:分模块，耐心的分析需求，并重点在于记录于文档中【如简单的.txt文件亦可，或者图片，或者word或excel文档】，
    列表跟踪项目的进度，或者记录待实习的业务【最好excel文件】。
    2【问题与决解文档/和其对应的心得文档】：前者：编号遇到的问题和解决方法；后者：和对应的编号记录心得总结。【建议使用excel文件.xlsx】
    3【异常/日常文档】. 确定异常处理方案，和日志处理系统，应该将异常日志。还要特别的有一个空引用错误记录【记录于 .log 日志文件中】
    4【线程文档】. 应该该准备一个线程文件，用于详细记录：线程的任务，线程需要的资源，和对应的线程安全操作。【简单的txt文件】
    5【API文档】. 你必须还有一个文件，用于记录API的使用记录。【excel文件或者text文件】
    6
    注意：能用excel文件就多用excel文件！！

2.开始做项目时：多多花心思在命名上，习惯了之后收益良多
    1. 对于每一个模块中类文件，特别是需要对外提供资源（数据域）的的类，都一定要先为其设计一个接口，或者合理的超类，
    即使是空接口和空类也行，因为后期可以随时扩展，对于添加的所有数据域，首选考虑的问题的加在父类还是子类上。

    2. 类的不同组成部分的设计思路是：
        1. 如果一定没办法把 数据域 放在父类上，则放在类的开始：结构如下：
           /*所有常量*/
           private final int size; //size 表示.....
           private static final boolean hasValue; //hasValue 表示...
           public final String sign; //sign 表示....
           ......

           /*私有非静态数据*/
           private int num; //num 表示.....
           private String name; //name 表示....
           ......

           /*公有或保护静态数据*/
           protected static double total; //total 表示....
           public static double total; //total 表示....
           .....

        2. 所有向外提供接口的方法，尽量设计简洁，即自己要对其有行数限制以提高可读性，同时，如果有较为复杂的语句块使得
        接口方法的行数增多，应该将其设为私有最终方法，将将这个语句块的功能设计为辅助函数，辅助函数可以不用对函数过于苛刻
        ，否则会造成函数数目剧增，程序运行性能微微降低，同时也回归到不利于阅读维护的老路！
        底层方法设计的隐式原则：结构单一，简单明了。
        其次：方法要严格遵守文档注释，功能实习完成之后应该收起减少篇幅。所有辅助方法都放在程序的最后面。要养成多写辅助
        方法的习惯，同时，尽量不要嵌套太多的if语句；如果功能和在if语句中的执行顺序无关，尽量不要让if语句太长，可以并列
        多个if语句，if语句也只需要完成某种小功能就够了

        3. 对于内部类的设计应该放在所有方法之后，main方法之前。

        4. 在方法中，可以尽量考虑使用特殊的语句块：{...}, 他在正确的使用的前提下，可以提高程序的可读性，可以减少命名冲突，
        更重要的是，可以通过合理的注释之后将其代码收起，用注释替换其可读性而不显得程序冗长。

